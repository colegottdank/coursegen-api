CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


create table "public"."course" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "title" text not null,
    "description" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."course" enable row level security;

create table "public"."profile" (
    "id" uuid not null,
    "username" text,
    "first_name" text,
    "last_name" text,
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."profile" enable row level security;

create table "public"."section" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "description" text not null,
    "content" text,
    "user_id" uuid not null,
    "parent_id" bigint,
    "course_id" bigint,
    "section_order" integer not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."section" enable row level security;

CREATE UNIQUE INDEX course_pkey ON public.course USING btree (id);

CREATE UNIQUE INDEX profile_pkey ON public.profile USING btree (id);

CREATE UNIQUE INDEX profile_username_key ON public.profile USING btree (username);

CREATE UNIQUE INDEX section_pkey ON public.section USING btree (id);

CREATE UNIQUE INDEX unique_course_user_title ON public.course USING btree (user_id, title);

CREATE UNIQUE INDEX unique_section_parent_course_name ON public.section USING btree (parent_id, course_id, name);

CREATE UNIQUE INDEX unique_section_parent_course_order ON public.section USING btree (parent_id, course_id, section_order);

alter table "public"."course" add constraint "course_pkey" PRIMARY KEY using index "course_pkey";

alter table "public"."profile" add constraint "profile_pkey" PRIMARY KEY using index "profile_pkey";

alter table "public"."section" add constraint "section_pkey" PRIMARY KEY using index "section_pkey";

alter table "public"."course" add constraint "course_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) not valid;

alter table "public"."course" validate constraint "course_user_id_fkey";

alter table "public"."course" add constraint "title" CHECK ((char_length(title) >= 3)) not valid;

alter table "public"."course" validate constraint "title";

alter table "public"."course" add constraint "unique_course_user_title" UNIQUE using index "unique_course_user_title";

alter table "public"."profile" add constraint "profile_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profile" validate constraint "profile_id_fkey";

alter table "public"."profile" add constraint "profile_username_key" UNIQUE using index "profile_username_key";

alter table "public"."profile" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profile" validate constraint "username_length";

alter table "public"."section" add constraint "section_course_id_fkey" FOREIGN KEY (course_id) REFERENCES course(id) ON DELETE CASCADE not valid;

alter table "public"."section" validate constraint "section_course_id_fkey";

alter table "public"."section" add constraint "section_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES section(id) ON DELETE CASCADE not valid;

alter table "public"."section" validate constraint "section_parent_id_fkey";

alter table "public"."section" add constraint "section_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profile(id) not valid;

alter table "public"."section" validate constraint "section_user_id_fkey";

alter table "public"."section" add constraint "unique_section_parent_course_name" UNIQUE using index "unique_section_parent_course_name";

alter table "public"."section" add constraint "unique_section_parent_course_order" UNIQUE using index "unique_section_parent_course_order";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profile (id, first_name, last_name)
  values (new.id, new.raw_user_meta_data->>'first_name', new.raw_user_meta_data->>'last_name');
  return new;
end;
$function$
;

create policy "Authenticated users can insert new course"
on "public"."course"
as permissive
for insert
to public
with check ((auth.role() = 'authenticated'::text));


create policy "Users can delete their courses"
on "public"."course"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Users can update their courses"
on "public"."course"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Users can view own course"
on "public"."course"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Individual insert access"
on "public"."profile"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can only view their own profile"
on "public"."profile"
as permissive
for select
to public
using ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profile"
as permissive
for update
to public
using ((auth.uid() = id));


create policy "Authenticated users can insert new section"
on "public"."section"
as permissive
for insert
to public
with check ((auth.role() = 'authenticated'::text));


create policy "Users can delete their sections"
on "public"."section"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Users can update their sections"
on "public"."section"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Users can view own sections"
on "public"."section"
as permissive
for select
to public
using ((auth.uid() = user_id));



